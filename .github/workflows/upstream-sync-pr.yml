name: Sync multiple branches with upstream via PR

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch:
          - name: main
            sync_branch: upstream-sync-main
          - name: dev
            sync_branch: upstream-sync-dev
    env:
      UPSTREAM_REPO: mother-of-all-self-hosting/mash-playbook
    steps:
      - name: Checkout fork branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.name }}
          fetch-depth: 0

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git

      - name: Fetch upstream branch
        run: git fetch upstream ${{ matrix.branch.name }}

      - name: Create or update sync branch
        run: |
          git checkout -B ${{ matrix.branch.sync_branch }}
          git reset --hard upstream/${{ matrix.branch.name }}
          git push -f origin ${{ matrix.branch.sync_branch }}

      - name: Find existing PR number (if any)
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${process.env.SYNC_BRANCH || '${{ matrix.branch.sync_branch }}'}`,
              base: '${{ matrix.branch.name }}',
              state: 'open'
            });
            if (pulls.length > 0) {
              core.setOutput('pr_number', pulls[0].number);
            }

      - name: Create PR if needed
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number = "${{ steps.find_pr.outputs.pr_number }}";
            if (!pr_number) {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Sync with upstream ${{ matrix.branch.name }}`,
                head: '${{ matrix.branch.sync_branch }}',
                base: '${{ matrix.branch.name }}',
                body: `Automated PR to merge upstream changes from \`${process.env.UPSTREAM_REPO}@${{ matrix.branch.name }}\` into this fork's \`${{ matrix.branch.name }}\`.`,
              });
              pr_number = pr.number;
            }
            core.setOutput('pr_number', pr_number);

      - name: Enable auto-merge on PR
        if: steps.create_pr.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = Number('${{ steps.create_pr.outputs.pr_number }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            const prNodeId = pr.node_id;
            await github.graphql(`
              mutation($pullRequestId:ID!) {
                enablePullRequestAutoMerge(input: {pullRequestId: $pullRequestId, mergeMethod: MERGE}) {
                  pullRequest {
                    autoMergeRequest {
                      enabledAt
                      enabledBy {
                        login
                      }
                    }
                  }
                }
              }
            `, {
              pullRequestId: prNodeId
            });
